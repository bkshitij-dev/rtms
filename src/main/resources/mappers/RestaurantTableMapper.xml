<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.rtms.mapper.RestaurantTableMapper">
    <select id="list" resultType="com.example.rtms.dto.response.RestaurantTableResponseDto">
        SELECT
        rt.id as id,
        rt.name as name,
        rt.seating_capacity as seatingCapacity,
        rt.status as status
        FROM restaurant_tables rt
    </select>

    <select id="get" resultType="com.example.rtms.dto.response.RestaurantTableResponseDto">
        SELECT
        rt.id as id,
        rt.name as name,
        rt.seating_capacity as seatingCapacity,
        rt.status as status
        FROM restaurant_tables rt
        WHERE rt.id = #{id}
    </select>

    <update id = "update">
        UPDATE restaurant_tables
        SET name = #{request.name},
        seating_capacity = #{request.seatingCapacity},
        status = #{request.status}
        WHERE id = #{id}
    </update>

    <select id="getTableFitForPax" resultType="java.lang.Long">
        SELECT rt.id
        FROM restaurant_tables rt
        WHERE rt.seating_capacity >= #{pax}
        AND rt.status = 'AVAILABLE'
        ORDER BY rt.seating_capacity ASC
        LIMIT 1
    </select>

    <select id="getNearestFreeTable" resultType="java.lang.String">
        <![CDATA[
        WITH future_time AS (
            SELECT
                #{timestamp}::timestamp AS reference_time
        ),
        table_availability AS (
            SELECT
                rt.id AS table_id,
                rt.seating_capacity,
                COALESCE(
                    MIN(
                        CASE
                            WHEN r.reservation_end_time > ft.reference_time THEN r.reservation_end_time
                            ELSE ft.reference_time
                        END
                    ),
                    ft.reference_time
                ) AS earliest_available_time
            FROM
                restaurant_tables rt
            CROSS JOIN
                future_time ft
            LEFT JOIN
                reservations r ON rt.id = r.restaurant_table_id
                AND r.status IN ('RESERVED', 'ARRIVED', 'NO_SHOW', 'CANCELLED', 'COMPLETED')
                AND r.reservation_end_time > ft.reference_time
            GROUP BY
                rt.id, rt.seating_capacity, ft.reference_time
        )
        SELECT
            earliest_available_time
        FROM
            table_availability
        WHERE
            seating_capacity >= #{pax}
        ORDER BY
            earliest_available_time ASC
        LIMIT 1
    ]]>
    </select>


    <update id = "updateStatus">
        UPDATE restaurant_tables
        SET status = #{status}
        WHERE id = #{id}
    </update>

    <update id = "updateStatusFromReservation">
        UPDATE restaurant_tables
        SET status = #{status}
        FROM reservations r
        WHERE restaurant_tables.id = r.restaurant_table_id
        AND r.id = #{reservationId}
    </update>

    <update id = "toggleActive">
        UPDATE restaurant_tables
        SET active = #{active}
        WHERE id = #{id}
    </update>
</mapper>
